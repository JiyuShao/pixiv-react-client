@import '_flex';
// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
.flexbox {
  @include flexbox;
}

.inline-flex {
  @include inline-flex;
}

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
.flex-direction-row {
  @include flex-direction(row);
}

.flex-direction-row-reverse {
  @include flex-direction(row-reverse);
}

.flex-direction-column {
  @include flex-direction(column);
}

.flex-direction-column-reverse {
  @include flex-direction(column-reverse);
}

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
.flex-wrap-nowrap {
  @include flex-wrap(nowrap);
}

.flex-wrap-wrap {
  @include flex-wrap(nowrap);
}

.flex-wrap-wrap-reverse {
  @include flex-wrap(nowrap);
}

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
.flex-justify-content-flex-start {
  @include justify-content(flex-start);
}

.flex-justify-content-flex-end {
  @include justify-content(flex-end);
}

.flex-justify-content-center {
  @include justify-content(center);
}

.flex-justify-content-space-between {
  @include justify-content(space-between);
}

.flex-justify-content-space-around {
  @include justify-content(space-around);
}

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
.flex-align-items-flex-start {
  @include justify-content(flex-start);
}

.flex-align-items-flex-end {
  @include justify-content(flex-end);
}

.flex-align-items-center {
  @include justify-content(center);
}

.flex-align-items-baseline {
  @include justify-content(baseline);
}

.flex-align-items-stretch {
  @include justify-content(stretch);
}
